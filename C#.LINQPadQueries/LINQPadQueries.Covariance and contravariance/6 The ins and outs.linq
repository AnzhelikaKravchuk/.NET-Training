<Query Kind="Program" />

//Ковариантность позволяет использовать производные типы 
//с глубиной наследования больше, нежели у типа, заданного
//универсальным параметром

//Ковариация(ковариантность) безопасна только тогда, когда тип описывает  
//только те операции, которые возвращают параметры типа

public interface IEnumerable <out T>
{
	IEnumerator<T> GetEnumerator();
}
//Контравариантность позволяет использовать производный тип 
//меньшей глубины наследования, нежели у типа, заданного 
//универсальным параметром.

//Контравариация(контравариантность) безопасна только тогда, 
//когда тип описывает только те операции, которые получают параметры типа 

public interface IComparer <in T>
{
	int Compare (T x, T y);	
}


public delegate TOutput Converter<in TInput, out TOutput>(TInput input);

void Main()
{
}
<Query Kind="Program" />

#region OCP
// Принцип открытости/закрытости (Open/Close Principle)

// Формулировка: программные сущности (классы, модули, функции и т.д.) 
// должны быть открыты для расширения, но закрыты для изменения

//Какую цель мы преследуем, когда применяем этот принцип? 
//Как известно программные проекты в течение свой жизни постоянно изменяются. 
//Изменения могут возникнуть, например, из-за новых требований заказчика 
//или пересмотра старых. В конечном итоге потребуется изменить код в 
//соответствии с текущей ситуацией.

//С одной стороны внесение изменений требует времени программистов и 
//тестировщиков, которое является очень дорогим ресурсом в производстве ПО. 
//С другой, бизнес должен достаточно быстро реагировать на рыночные изменения 
//и время здесь представляется очень важным конкурентным преимуществом.

//Отсюда можно сделать вывод, что нашей целью является разработка системы, 
//которая будет достаточно просто и безболезненно меняться. Другими словами,
//система должна быть гибкой. Например, внесение изменений в библиотеку 
//общую для 4х проектов не должно быть долгим («долгим» является разным
//промежутком времени для конкретной ситуации) и уж точно не должно вести 
//к изменениям в этих 4х проектах.

//Принцип открытости/закрытость как раз и дает понимание того, как оставаться 
//достаточно гибкими в условиях постоянно меняющихся требований.
#endregion

#region Проблема 1 (без абстракций)
//Самый простой пример нарушения принципа открытости/закрытости – 
//использование конкретных объектов без абстракций. Предположим, 
//что у нас есть объект SmtpMailer. Для логирования своих действий 
//он использует Logger, который записывает информацию в текстовые файлы.
#endregion

public class Logger
{
	public void Log(string logText)
	{
		// сохранить лог в файле
	}
}

public class SmtpMailer
{
	private readonly Logger logger;
	
	public SmtpMailer()
	{
		logger = new Logger();
	}
	
	public void SendMessage(string message)
	{
		// отсылка сообщения
		logger.Log(string.Format("Отправлено '{0}'", message));
	}
}
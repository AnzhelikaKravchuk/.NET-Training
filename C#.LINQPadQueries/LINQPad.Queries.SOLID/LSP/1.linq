<Query Kind="Program" />

#region LSP
//Принцип замещения Лисков (Liskov Substitution Principle)
//
//Формулировка №1: eсли для каждого объекта o1 типа S существует объект o2 типа T,
//который для всех программ P определен в терминах T, то поведение P не изменится, 
//если o1 заменить на o2 при условии, что S является подтипом T.
//
//Формулировка №2: подтипы должны быть заменяемы базовыми типами.

//Функции, которые используют ссылки на базовые классы, должны иметь возможность 
//использовать объекты производных классов, не зная об этом.
#endregion

//Предлагаемый ниже класс Repository нарушает еще и принцип замещения Лисков. 
//Дело в том, что внутри класса Repository мы оперируем не 
//только абстрактной сущностью AbstractEntity, но и унаследованными типами.
//А это значит, что в данном случае подтипы AccountEntity и RoleEntity 
//не могут быть заменены типом, от которого они унаследованы. 
//По определению имеем нарушение.

//Надо заметить, что принципы проектирования взаимосвязаны. 
//Нарушение одного из принципов скорее всего приведет к нарушению
//одного или нескольких других принципов.
public abstract class AbstractEntity{ }
 
public class AccountEntity : AbstractEntity{ }
 
public class RoleEntity : AbstractEntity{ }
 
public class Repository
{
	public void Save(AbstractEntity entity)
	{
		if (entity is AccountEntity)
		{
			// специфические действия для AccountEntity
		}
		if (entity is RoleEntity)
		{
			// специфические действия для RoleEntity
		}
	}
}
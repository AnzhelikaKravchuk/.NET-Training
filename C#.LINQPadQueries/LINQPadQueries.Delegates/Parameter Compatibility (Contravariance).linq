<Query Kind="Program" />

//Вариантность — перенос наследования исходных типов на 
//производные от них типы. 

//Под производными типами понимаются контейнеры, делегаты,
//обобщения, а не типы, связанные отношениями «предок-потомок».
//Различными видами вариантности являются ковариантность,
//контравариантность и инвариантность.

//Ковариантность — перенос наследования исходных типов 
//на производные от них типы в прямом порядке.

//Контравариантность — перенос наследования исходных типов
//на производные от них типы в обратном порядке.

//Инвариантность — ситуация, когда наследование исходных
//типов не переносится на производные.

//если вызов метода и применение его возвращаемого значения 
//допустимо (в смысле статической типизации) во всех местах,
//где взамен можно было бы обратиться к экземпляру делегата
//конкретного типа и использовать его значение, то такой метод
//может применяться в качестве целевого для создания делегата
//этого типа

// При вызове метода можно передавать аргументы более 
// специфичного типа, чем параметры методов
// по этой же причине делегат может иметь более 
// специфичные параметры, чем его целевой метод
// контравариантность делегатов - только для сссылочных типов:

delegate void StringAction(string s);

static void Main()
{
	StringAction sa = new StringAction(ActOnObject);
	sa("hello");
}

static void ActOnObject()
{
	Console.WriteLine();   // hello
}

static void ActOnObject(object o)
{
	Console.WriteLine(o);   // hello
}
<Query Kind="Program" />

public interface ILogger
{
	void Write();
}
internal class DefaultLogger : ILogger
{
	public void Write() { }
}
public class GlobalLogger
{
	private static ILogger _logger = new DefaultLogger();
	// Классы этой сборки (или друзья) смогут задать
	// нужный экземпляр логера
	public static ILogger Logger
	{
		get { return _logger; }
		//позволяет установить нужный экземпляр синглтона
		//при старте приложения, во время смены контекста или
		//во время инициализации юнит-тестов
		internal set { _logger = value; }
	}
}
//http://sergeyteplyakov.blogspot.com.by/2013/01/blog-post.html
//Главными недостатками синглтонов считаются невозможность
//юнит-тестирования классов, которые пользуются услугами синглтона,
//и низкая гибкость. Но если воспользоваться этой оговоркой и
//дать возможность приложению устанавливать нужный экземпляр 
//синглтона, то многие недостатки исчезнут сами собой. По сути,
//использование данного аспекта приводит к вариации синглтона,
//называемой Ambient Context.
//Основная суть такой модификации состоит в том, что 
//статическое свойство Instance вместо возврата конкретного
//класса возвращает экземпляр абстрактного класса или интерфейса.
//Также появляется setter свойства, который позволяет установить
//нужный экземпляр синглтона при старте приложения, 
//во время смены контекста или во время инициализации юнит-тестов.
//В результате решение будет более гибким и тестируемым, чего
//так не хватает классической реализации паттерна.
// Define other methods and classes here
